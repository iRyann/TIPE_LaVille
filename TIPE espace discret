import random
import math
import heapq

a = [2,1,1,2,1,100,1,2,1,2,100]

graphe = { 
    "0" : {"1":2.0,"2":4.0} , 
    "1" : {"0":2.0,"2":1.0,"3":4.0} ,
    "2" : {"0":4.0,"1":1.0,"3":2.0} ,
    "3" : {"1":4.0,"2":2.0}
}
imm = [(0,1,0.7),(0,1,1.3),(0,2,0.8),(0,2,2.1),(0,2,3.2),(1,2,0.6),(2,3,0.6),(2,3,1.3),(1,3,1.0),(1,3,2.0),(1,3,3.1)]


def succ (g,n) :
  u=str(n)
  return g[u] 

def dijkstra (g,s,sf) :
  n = len(g)
  d = []
  for i in range (0,n) :
    d.append(1000)
  d[s]=0
  o=[]
  heapq.heappush(o, (d[s], s))
  while o != [] :
    (_,u) = heapq.heappop(o)
    for k in succ(g,u).keys() :
      v=int(k)
      if d[u]+succ(g,u)[k] < d[v] :
        temp = d[v]
        d[v] = d[u]+succ(g,u)[k]
        if temp == 1000 :
          heapq.heappush(o,(d[v],v))
  return d[sf]

#print(dijkstra(graphe,0,3))

def graph_with_station (g,s1,s2,d,ind_imm,l3):
  (s1_imm,s2_imm,d_imm) = l3[ind_imm]
  if (s1_imm == s1) and (s2_imm == s2) :
    if d_imm < d :
      ns1 = str(len(g)-1)
      ns2 = str(s2_imm)
      d = d-d_imm
    else :
      ns1 = str(s1_imm)
      ns2 = str(len(g)-1)
  elif (s1_imm == s2) and (s2_imm == s1) :
    if d_imm < (d_imm + (g[str(len(g)-1)])[str(s2_imm)] - d) :
      ns1 = str(s2_imm)
      ns2 = str(len(g)-1)
    else:
      ns1 = str(len(g)-1)
      ns2 = str(s1_imm)
      d = d - (g[str(len(g)-1)])[str(s2_imm)]
  else :
    ns1 = str(s1)
    ns2 = str(s2)
  new_g = {}
  for k,v in g.items() :
    new_g[k] = v.copy()
  sta=str(len(g))
  new_g[sta]={ns1:d,ns2:(g[ns1])[ns2]-d}
  (new_g[ns1])[sta]=d
  (new_g[ns2])[sta]=(g[ns1])[ns2]-d
  del (new_g[ns1])[ns2]
  del (new_g[ns2])[ns1]
  return new_g



def graph_with_imm (g,ind_imm,l3):
  new_g = {}
  for k,v in g.items() :
    new_g[k] = v.copy()
  ind_imm_gra=str(len(g))
  (s1,s2,d) = l3[ind_imm]
  ns1 = str(s1)
  ns2 = str(s2)
  new_g[ind_imm_gra]={ns1:d,ns2:(g[ns1])[ns2]-d}
  (new_g[ns1])[ind_imm_gra]=d
  (new_g[ns2])[ind_imm_gra]=(g[ns1])[ns2]-d
  del (new_g[ns1])[ns2]
  del (new_g[ns2])[ns1]
  return new_g

#print(graphe)
#g_imm= graph_with_imm (graphe,0,imm)
#print(g_imm)
#g0 = graph_with_station(g_imm,0,1,1.1,0,imm)
#print(g0)
#print(dijkstra(g0,4,5))

def min_dist (g,l,l3,p) :
  g_imm = graph_with_imm (g,p,l3)
  (s1,s2,d) = l[0]
  g0 = graph_with_station(g_imm,s1,s2,d,p,l3)
  res = dijkstra(g0,len(g0)-2,len(g0)-1)
  for i in range (1,len (l)) :
    (si1,si2,di) = l[i]
    gi = graph_with_station(g_imm,si1,si2,di,p,l3)
    res = min(res,dijkstra(gi,len(gi)-2,len(gi)-1))
  return res

def f (g,l,l2,l3) :
  res = 0
  som = 0
  for i in range (0,len(l3)) :
    res = res + (min_dist(g,l,l3,i)*l2[i])
  for i in range (0,len(l3)) :
    som = som + l2[i]
  res = res/som
  return res



def simulated_annealing(g,initial_state,l2,l3):
    """Peforms simulated annealing to find a solution"""
    initial_temp = 300
    final_temp = 1
    current_temp = initial_temp

    # Start by initializing the current state with the initial state
    current_state = initial_state
    solution = current_state

    while current_temp > final_temp:
        neighbor = get_neighbors(g,current_state,l2,current_temp/50)
        # print(neighbor)
        # Check if neighbor is best so far
        cost_diff = f(g,current_state,l2,l3)-f(g,neighbor,l2,l3)
        # print(cost_diff)
        # if the new solution is better, accept it
        if cost_diff > 0:
            solution = neighbor
        # if the new solution is not better, accept it with a probability of e^(-cost/temp)
        else:
            if random.uniform(0, 1) > math.exp(cost_diff / current_temp) :
                solution = neighbor
        # decrement the temperature
        # print(solution)
        current_temp = current_temp * 0.999
        current_state = solution
    return solution




def get_neighbor_station(g,station,eps):
  """Returns neighbors of the argument state for your solution."""
  (s1,s2,d) = station
  ns1 = str(s1)
  ns2 = str(s2)
  carburant=random.uniform(0,eps)
  sens=random.randint(0,1)
  if sens == 1 :
    d = (g[ns1])[ns2] - d
    temp = ns1
    ns1 = ns2
    ns2 = temp
  while carburant != 0 :
    if carburant > (g[ns1])[ns2] - d :
      carburant = carburant - ((g[ns1])[ns2] - d)
      voisins = list(g[ns2].keys())
      temp=ns2
      ns2=random.choice(voisins)
      ns1=temp
      d = 0
    else :
      d = d + carburant
      carburant = 0
  return (int(ns1),int(ns2),d)


def get_neighbors(g,state,l2,eps):
  """Returns neighbors of the argument state for your solution."""
  res=[]
  for i in range (0,len(state)):
    res.append(get_neighbor_station(g,state[i],eps))
  
  return res

def best_answer (g,initial_state,l2,l3) :
  res = simulated_annealing(g,initial_state,l2,l3)
  print(res)
  for i in range (0,4) :
    new_res = simulated_annealing(g,initial_state,l2,l3)
    print(new_res)
    if f(g,new_res,l2,l3) < f(g,res,l2,l3) :
      res = new_res
  return res

answer = best_answer(graphe,[(1,3,1.0),(2,0,1.0)],a,imm)
print(answer)
print(f(graphe,answer,a,imm))
